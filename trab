# Trabalho av2, LOCADORA DE FILMES
# ALUNOS 
# LEANDRO VIEIRA SERRANO 202108799858
# Vitor Cavalcante Porto 202108493627

import sqlite3
import tkinter as ttk
import tkinter.messagebox as msb
from tkinter import Tk, Label, StringVar, Entry, Button, Frame, Menu, Scrollbar, Toplevel, TOP, X, Y, W, NO, RIGHT, LEFT, SOLID, BOTTOM, VERTICAL, HORIZONTAL


root = Tk()
root.title = "Lista de Contatos"
width = 800
height = 400
sc_width = root.winfo_screenwidth()
sc_height = root.winfo_screenheight()
x =(sc_width/2) - (width/2)
y =(sc_height/2) - (height/2)
root.geometry("%dx%d+%d+%d" % (width, height, x, y))
root.resizable(0,0)
update_window = None
new_window = None
caminho_db = 'programas\contatos.sqlite'

#

def database():
    conn = sqlite3.connect(caminho_db)
    cursor = conn.cursor()
    query = '''CREATE TABLE IF NOT EXISTS humanos(
                id INTEGER NOT NULL AUTOINCREMENT, 
                nome TEXT,
                filme TEXT,
                date TEXT,
                telefone TEXT,
                endereco TEXT,
            )'''
    cursor.execute(query)
    cursor.execute('SELECT * FROM humanos ORDER BY nome')
    fetch = cursor.fetchall()
    for date in fetch:
        tree.insert('','end',values = data)
    cursor.close()
    conn.close()

def enviar_dados():
    if nome.get() == '' or filme.get() == '' or date.get() == '' or telefone.get() == '' or endereco.get() == '':
        msb.showwarning('', 'Por favor, Digite todos os campos.', icon='warning')
    else:
        conn = sqlite3.connect(caminho_db)
        cursor = conn.cursor()
        query = 'INSERT INTO humanos (nome, filme, date, telefone, endereco) VALUES (?, ?, ?, ?, ?)'
        cursor.execute(query, (str(nome.get()), str(filme.get()), str(date.get()), str(telefone.get()), str(endereco.get())))
        conn.commit()
        cursor.execute('SELECT * FROM humanos ORDER BY nome')
        fetch = cursor.fetchall()
        for data in fetch:
            tree.insert('','end', values=data)
        cursor.close()
        conn.close()
        nome.set('')
        filme.set('')
        date.set('')
        telefone.set('')
        endereco.set('')

def atualizar_dados():
    conn = sqlite3.connect(caminho_db)
    cursor = conn.cursor()
    cursor.execute(''' UPDATE humanos SET nome = ?, filme = ?, date = ?, telefone = ?, endereco = ? WHERE id = ? ''',
                    (str(nome.get()), str(filme.get()), str(date.get()), str(telefone.get()), str(endereco.get()), int(id)))
    conn.commit()               
    cursor.execute('SELECT * FROM humanos ORDER BY nome')
    fetch = cursor.fetchall()
    for data in fetch:
        tree.insert('','end', values=data)
    cursor.close()
    conn.close()
    nome.set('')
    filme.set('')
    date.set('')
    telefone.set('')
    endereco.set('')
    janela_atualizar.destroy()

def selecionado(event):
    global id, janela_atualizar
    item_selecionado = tree.focus()
    conteudo = (tree.item(item_selecionado))
    itens_selecionados = conteudo ['values']
    id = itens_selecionados[0]
    nome.set('')
    nome.set(itens_selecionados[1])
    filme.set('')
    filme.set(itens_selecionados[2])
    date.set('')
    date.set(itens_selecionados[3])
    telefone.set('')
    telefone.set(itens_selecionados[4])
    endereco.set('')
    endereco.set(item_selecionado[5])
#
    janela_atualizar = Toplevel()
    janela_atualizar.title('Atualizar')
    form_titulo = Frame(janela_atualizar)
    form_titulo.pack(size=TOP)
    form_contato = Frame(janela_atualizar)
    form_contato.pack(size=TOP, pady=10)
    width = 400
    height = 300
    sc_width = root.winfo_screenwidth()
    sc_height = root.winfo_screenheight()
    x =(sc_width/2) - (width/2)
    y =(sc_height/2) - (height/2)
    root.geometry("%dx%d+%d+%d" % (width, height, x, y))
    root.resizable(0,0)
#

    lbl_titulo = Label(form_titulo, text='Atualizando cadastro', font=('arial', 18), bg='BLUE', width=200)
    lbl_titulo.pack(fill=x)
    lbl_nome = Label(form_contato, text='Nome', font=('arial',12))
    lbl_nome.grid(row=0, sticky=W)
    lbl_filme = Label(form_contato, text='Filme', font=('arial',12))
    lbl_filme.grid(row=1, sticky=W)
    lbl_date = Label(form_contato, text='Data', font=('arial',12))
    lbl_date.grid(row=2, sticky=W)
    lbl_telefone = Label(form_contato, text='Telefone', font=('arial',12))
    lbl_telefone.grid(row=3, sticky=W)
    lbl_endereco = Label(form_contato, text='Endereco', font=('arial',12))
    lbl_endereco.grid(row=4, sticky=W)
#
    ent_nome = Entry(form_contato, textvariable=nome, font=('arial',12))
    ent_nome.grid(row=0, column=1)
    ent_filme = Entry(form_contato, textvariable=filme, font=('arial',12))
    ent_filme.grid(row=1, column=1)
    ent_date = Entry(form_contato, textvariable=date, font=('arial',12))
    ent_date.grid(row=2, column=1)
    ent_telefone = Entry(form_contato, textvariable=telefone, font=('arial',12))
    ent_telefone.grid(row=3, column=1)
    ent_endereco = Entry(form_contato, textvariable=endereco, font=('arial',12))
    ent_endereco.grid(row=4, column=1)
#
    btn_atualizar = Button(form_contato, text='Atualizar', width=50, command = atualizar_dados())
    btn_atualizar.grid(row=6, columnspan=2)
#

def inserir_dados():
    global janela_novo
    nome.set('')
    filme.set('')
    date.set('')
    telefone.set('')
    endereco.set('')
  
#
    janela_novo = Toplevel()
    janela_novo.title('Cadastro')
    form_titulo = Frame(janela_novo)
    form_titulo.pack(size=TOP)
    form_contato = Frame(janela_novo)
    form_contato.pack(size=TOP, pady=10)
    width = 400
    height = 300
    sc_width = root.winfo_screenwidth()
    sc_height = root.winfo_screenheight()
    x =(sc_width/2) - (width/2)
    y =(sc_height/2) - (height/2)
    root.geometry("%dx%d+%d+%d" % (width, height, x, y))
    root.resizable(0,0)
#

    lbl_titulo = Label(form_titulo, text='Inserindo cadastro', font=('arial', 18), bg='BLUE', width=200)
    lbl_titulo.pack(fill=x)
    lbl_nome = Label(form_contato, text='Nome', font=('arial',12))
    lbl_nome.grid(row=0, sticky=W)
    lbl_filme = Label(form_contato, text='Filme', font=('arial',12))
    lbl_filme.grid(row=1, sticky=W)
    lbl_date = Label(form_contato, text='Data', font=('arial',12))
    lbl_date.grid(row=2, sticky=W)
    lbl_telefone = Label(form_contato, text='Telefone', font=('arial',12))
    lbl_telefone.grid(row=3, sticky=W)
    lbl_endereco = Label(form_contato, text='Endereco', font=('arial',12))
    lbl_endereco.grid(row=4, sticky=W)
#
    ent_nome = Entry(form_contato, textvariable=nome, font=('arial',12))
    ent_nome.grid(row=0, column=1)
    ent_filme = Entry(form_contato, textvariable=filme, font=('arial',12))
    ent_filme.grid(row=1, column=1)
    ent_date = Entry(form_contato, textvariable=date, font=('arial',12))
    ent_date.grid(row=2, column=1)
    ent_telefone = Entry(form_contato, textvariable=telefone, font=('arial',12))
    ent_telefone.grid(row=3, column=1)
    ent_endereco = Entry(form_contato, textvariable=endereco, font=('arial',12))
    ent_endereco.grid(row=4, column=1)
#
    btn_atualizar = Button(form_contato, text='Cadastrnado', width=50, command = enviar_dados())
    btn_atualizar.grid(row=6, columnspan=2)

def deletar_dados():
    if not tree.selection():
        msb.showwarning('', 'Por favor, selecione um item da lista', icon='warning')
    else:
        resultado = msb.askquestion('', 'Tem certeza que deseja excluir o contato?')
        if resultado == 'yes':
            item_selecionado = tree.focus()
            conteudo = (tree.item(item_selecionado))
            itens_selecionados = conteudo['values']
            tree.delete(item_selecionado)
            conn = sqlite3.connect(caminho_db)
            cursor = conn.cursor()
            cursor.execute(f'DELETE FROM humanos WHERE id = {item_selecionado[0]}')
            conn.commit()
            cursor.close()
            conn.close()
#
# ------ FRAME PRINCIPAL -------------
top = Frame(root, width=500, bd=1, relief=SOLID)
top.pack(side=TOP)
mid = Frame(root, width=500, bg='#6666ff')
mid.pack(side=TOP)
midleft = Frame(mid, width=100)
midleft.pack(side=LEFT)
midleftPadding = Frame(mid, width=300, bg='#6666ff')
midleftPadding.pack(side=LEFT)
midright = Frame(mid, width=100)
midright.pack(side=RIGHT)
bottom = Frame(root, width=500)
bottom.pack(side=BOTTOM)
tableMargin = Frame(root, width=500)
tableMargin.pack(side=TOP)

# -------- LABEL PRINCIPAL -------
lbl_titulo = Label(top, text='SISTEMA DE CONTATOS ðŸ’˜ ', font=('arial', 18), width=500)
lbl_titulo.pack(fill=X)

lbl_alterar = Label(bottom, text='ðŸš‘ Para alterar clique duas vezes no contato desejado!', font=('arial', 18), width=500)
lbl_alterar.pack(fill=X)

# --------- BOTOES PRINCIPAL -------
bttn_incluir = Button(midleft, text='INSERIR', bg='royal blue', command=inserir_dados)
bttn_incluir.pack()

bttn_excluir = Button(midright, text='EXCLUIR', bg='OrangeRed2', command=deletar_dados)
bttn_excluir.pack(side=RIGHT)

# -------- TREEVIEW PRINCIAPL ---------
ScrollbarX = Scrollbar(tableMargin, orient=HORIZONTAL)
ScrollbarY = Scrollbar(tableMargin, orient=VERTICAL)

tree = ttk.Treeview(tableMargin, columns=('ID', 'Nome', 'Filme', 'Date', 'Telefone', 'EndereÃ§o'),
                    height=400, selectmode='extended', yscrollcommand=ScrollbarY.set, xscrollcommand=ScrollbarX.set)
ScrollbarY.config(command=tree.yview)
ScrollbarY.pack(side=RIGHT, fill=Y)
ScrollbarX.config(command=tree.xview)
ScrollbarX.pack(side=BOTTOM, fill=X)
tree.heading('ID', text='ID', anchor=W)
tree.heading('Nome', text='Nome', anchor=W)
tree.heading('Filme', text='Filme', anchor=W)
tree.heading('Date', text='Date', anchor=W)
tree.heading('Telefone', text='Telefone', anchor=W)
tree.heading('EndereÃ§o', text='EndereÃ§o', anchor=W)
tree.column('#0', stretch=NO, minwidth=0, width=1)
tree.column('#1', stretch=NO, minwidth=0, width=20)
tree.column('#2', stretch=NO, minwidth=0, width=80)
tree.column('#3', stretch=NO, minwidth=0, width=120)
tree.column('#4', stretch=NO, minwidth=0, width=90)
tree.column('#5', stretch=NO, minwidth=0, width=80)
tree.pack()
tree.bind('<Double-Button-1>', selecionado)

# ------ MENU - PRINCIPAL -------
menu_bar = Menu(root)
root.config(menu=menu_bar)

#adicionar itens
menu_arquivo = Menu(menu_bar, tearoff=0)
menu_bar.add_cascade(label='Menu', menu=menu_arquivo)
menu_arquivo.add_command(label='Criar novo', command=inserir_dados)
menu_arquivo.add_separator()
menu_arquivo.add_command(label='Sair', command=root.destroy)

menu_sobre = Menu(menu_bar, tearoff=0)
menu_bar.add_cascade(label='Sobre', menu=menu_sobre)
menu_sobre.add_command(label='Info')

if __name__ == '__main__':
    database()
    root.mainloop()
